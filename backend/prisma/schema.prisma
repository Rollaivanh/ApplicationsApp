// -------------------------------------------------------------
// DATASOURCE & GENERATOR
// -------------------------------------------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------------------------------------------
// ENUMS
// -------------------------------------------------------------

// General status of a job application
enum ApplicationStatus {
  SENT
  UNDER_REVIEW
  INTERVIEW
  REJECTED
  ACCEPTED
}

// Type of interview
enum InterviewType {
  HR
  TECHNICAL
  CULTURAL
  FINAL
  OTHER
}

// -------------------------------------------------------------
// MAIN MODELS
// -------------------------------------------------------------

// User of the platform
model User {
  id              Int             @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String          @unique
  password        String
  createdAt       DateTime        @default(now())

  // Relations
  profile         Profile?
  applications    Application[]   @relation("UserApplications")
  voiceSessions   VoiceSession[]  @relation("UserVoiceSessions")

  @@map("users")
}

// Professional profile of the user
model Profile {
  id                  Int        @id @default(autoincrement())
  userId              Int        @unique
  softSkills          String[]   // e.g. ["Communication", "Leadership"]
  technicalSkills     String[]   // e.g. ["React", "Node.js", "PostgreSQL"]
  experience          String[]   // brief descriptions
  education           String[]
  languages           String[]
  certifications      String[]
  interests           String[]
  location            String
  availability        String?    // e.g. "Full-time", "Freelance"
  linkedin            String?
  cvUrl               String?
  portfolioUrl        String?

  user                User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

// Job application
model Application {
  id              Int                   @id @default(autoincrement())
  company         String
  position        String
  status          ApplicationStatus      @default(SENT)
  source          String?
  description     String?
  notes           String?
  link            String?
  image           String?
  createdAt       DateTime               @default(now())

  userId          Int
  user            User                   @relation("UserApplications", fields: [userId], references: [id], onDelete: Cascade)

  interviews      Interview[]            @relation("ApplicationInterviews")

  @@map("applications")
}

// Interviews linked to a job application
model Interview {
  id              Int              @id @default(autoincrement())
  type            InterviewType    @default(OTHER)
  interviewer     String?
  date            DateTime?
  notes           String?
  number          Int?

  applicationId   Int
  application     Application      @relation("ApplicationInterviews", fields: [applicationId], references: [id], onDelete: Cascade)

  voiceSessions   VoiceSession[]   @relation("InterviewVoiceSessions")

  @@map("interviews")
}

// Voice sessions generated (ElevenLabs, OpenAI TTS, Google TTS, etc.)
model VoiceSession {
  id              Int          @id @default(autoincrement())
  text            String       // original text sent to TTS
  audioUrl        String?      // file path or URL of the generated audio
  provider        String?      // e.g. "ElevenLabs", "OpenAI", "GoogleTTS"
  durationSeconds Int?
  createdAt       DateTime     @default(now())

  // Relations
  userId          Int
  user            User         @relation("UserVoiceSessions", fields: [userId], references: [id], onDelete: Cascade)

  interviewId     Int?
  interview       Interview?   @relation("InterviewVoiceSessions", fields: [interviewId], references: [id], onDelete: Cascade)

  @@map("voice_sessions")
}
